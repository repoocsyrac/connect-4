class Board {

    board;
    currentPlayer; 
    winner;
    bitmasks;
    flag; // false if game hasnt finished yet

    constructor() {
        // -1=empty, 0=red, 1=yellow
        this.board = [
            [-1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1],
            [-1, -1, -1, -1, -1, -1, -1]
        ];
        this.currentPlayer = 0; // 0 = red, 1 = yellow
        this.winner = -1; // -1=game not over, 0=red, 1=yellow, 2=draw
        document.getElementById("gameStatus").textContent = "Current Player: RED";
        document.getElementById("main-border").style.borderColor = "red";
        this.loadBitMasks();
        this.flag = false; 
    }

    makemove(pos) {
        if(this.flag) {
            return;
        }
        var column = pos%7;
        var row = this.determineRow(column);
        if(row == -1) {
            return;
        }
        if(this.currentPlayer == 0) {
            this.board[row][column] = 0;
            document.getElementById((row*7 + column).toString()).style.background = "red";
        } else {
            this.board[row][column] = 1;
            document.getElementById((row*7 + column).toString()).style.background = "yellow";
        }
        this.currentPlayer = (this.currentPlayer + 1) % 2;
        if(this.currentPlayer == 0) {
            document.getElementById("gameStatus").textContent = "Current Player: RED";
            document.getElementById("main-border").style.borderColor = "red";
        } else {
            document.getElementById("gameStatus").textContent = "Current Player: YELLOW";
            document.getElementById("main-border").style.borderColor = "yellow";
        }
        if(this.hasGameFinished()) {
            if(this.winner == 0) {
                document.getElementById("gameStatus").textContent = "------RED WINS------";
            } else if(this.winner == 1) {
                document.getElementById("gameStatus").textContent = "------YELLOW WINS------";
            } else if(this.winner == 2) {
                document.getElementById("gameStatus").textContent = "------DRAW------";
            }
        }
    }

    hasGameFinished() {
        var currentRed = this.getBinaryString("0");
        for(let i=0; i<this.bitmasks.length; i++) {
            let count=0;
            let mask = this.bitmasks[i];
            for(let j=0; j<mask.length; j++) {
                if(currentRed.charAt(j) == mask.charAt(j) & currentRed.charAt(j) == "1") {
                    count++;
                }
            }
            if(count >= 4) {
                this.winner=0;
                this.flag = true;
                return true;
            }
        }
        
        var currentYellow = this.getBinaryString("1");
        for(let i=0; i<this.bitmasks.length; i++) {
            let count=0;
            let mask = this.bitmasks[i];
            for(let j=0; j<mask.length; j++) {
                if(currentYellow.charAt(j) == mask.charAt(j) & currentYellow.charAt(j) == "1") {
                    count++;
                }
            }
            if(count >= 4) {
                this.winner=1;
                this.flag = true;
                return true;
            }
        }

        // Checks if board is full
        if(!this.board.toString().includes("-1")) {
            this.winner = 2;
            this.flag = true;
            return true;
        }

        return false;

    }

    determineRow(column) {
        for (let i = 5; i >= 0; i--) {
            if(this.board[i][column] == -1) {
                return i;
            }
        }
        return -1;
    }

    loadBitMasks() {
        var temp
        /*this.bitmasks = [];
        fetch('positions.csv')
        .then(response => response.text())
        .then(text => temp)*/
        this.bitmasks = temp.split(",");
    }

    getBinaryString(player) {
        var str = "";
        var currentBoard = this.board.toString().split(",");
        for(let i=0; i<= currentBoard.length; i++) {
            if(currentBoard[i] === player) {
                str += "1";
            } else {
                str += "0";
            }
        }
        return str;
    }


}